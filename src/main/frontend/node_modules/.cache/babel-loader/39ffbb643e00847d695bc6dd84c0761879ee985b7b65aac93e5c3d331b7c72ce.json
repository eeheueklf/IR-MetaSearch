{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\eeheu\\\\Documents\\\\15.Lab\\\\10.react\\\\IR-MetaSearch\\\\src\\\\main\\\\frontend\\\\src\\\\page\\\\KMeans.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction KMeans() {\n  _s();\n  const [imageData, setImageData] = useState([]);\n  const [numClusters, setNumClusters] = useState(3); // 기본 클러스터 수\n  const [result, setResult] = useState([]);\n\n  // 파일 업로드 핸들러\n  const handleFileChange = event => {\n    const files = event.target.files;\n    const data = [];\n\n    // 파일에서 이미지 데이터를 추출하여 데이터 배열에 추가\n    Array.from(files).forEach(file => {\n      const reader = new FileReader();\n      reader.onload = e => {\n        const imgData = extractImageData(e.target.result);\n        data.push(imgData);\n      };\n      reader.readAsDataURL(file);\n    });\n    setImageData(data); // 업로드된 이미지 데이터 상태 설정\n  };\n\n  // 이미지를 숫자 데이터로 변환하는 함수 (여기서는 임의로 숫자 데이터를 사용)\n  const extractImageData = imageSrc => {\n    // 이미지를 숫자 데이터로 변환하는 로직 필요 (예: 이미지 크기, 색상 값 등)\n    // 현재는 임시로 [1, 2, 3] 형식의 데이터로 가정\n    return [Math.random() * 10, Math.random() * 10, Math.random() * 10];\n  };\n\n  // 클러스터링 요청을 백엔드로 전송하는 함수\n  const handleClusterImages = async () => {\n    try {\n      const response = await axios.post('http://localhost:8080/api/kmeans', imageData, {\n        params: {\n          numClusters\n        }\n      });\n      setResult(response.data); // 클러스터링 결과 설정\n    } catch (error) {\n      console.error(\"Error clustering images:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Image Clustering\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        multiple: true,\n        onChange: handleFileChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Number of Clusters: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: numClusters,\n        onChange: e => setNumClusters(Number(e.target.value))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClusterImages,\n      children: \"Cluster Images\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Cluster Results:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: JSON.stringify(result, null, 2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n}\n_s(KMeans, \"Ue42YfOYuqE6JrfRBaY9KxnTyeE=\");\n_c = KMeans;\nexport default KMeans;\nvar _c;\n$RefreshReg$(_c, \"KMeans\");","map":{"version":3,"names":["useState","axios","jsxDEV","_jsxDEV","KMeans","_s","imageData","setImageData","numClusters","setNumClusters","result","setResult","handleFileChange","event","files","target","data","Array","from","forEach","file","reader","FileReader","onload","e","imgData","extractImageData","push","readAsDataURL","imageSrc","Math","random","handleClusterImages","response","post","params","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","multiple","onChange","value","Number","onClick","JSON","stringify","_c","$RefreshReg$"],"sources":["C:/Users/eeheu/Documents/15.Lab/10.react/IR-MetaSearch/src/main/frontend/src/page/KMeans.jsx"],"sourcesContent":["import {useState} from \"react\";\r\nimport axios from \"axios\";\r\n\r\nfunction KMeans() {\r\n    const [imageData, setImageData] = useState([]);\r\n    const [numClusters, setNumClusters] = useState(3);  // 기본 클러스터 수\r\n    const [result, setResult] = useState([]);\r\n\r\n    // 파일 업로드 핸들러\r\n    const handleFileChange = (event) => {\r\n        const files = event.target.files;\r\n        const data = [];\r\n\r\n        // 파일에서 이미지 데이터를 추출하여 데이터 배열에 추가\r\n        Array.from(files).forEach((file) => {\r\n            const reader = new FileReader();\r\n            reader.onload = (e) => {\r\n                const imgData = extractImageData(e.target.result);\r\n                data.push(imgData);\r\n            };\r\n            reader.readAsDataURL(file);\r\n        });\r\n\r\n        setImageData(data);  // 업로드된 이미지 데이터 상태 설정\r\n    };\r\n\r\n    // 이미지를 숫자 데이터로 변환하는 함수 (여기서는 임의로 숫자 데이터를 사용)\r\n    const extractImageData = (imageSrc) => {\r\n        // 이미지를 숫자 데이터로 변환하는 로직 필요 (예: 이미지 크기, 색상 값 등)\r\n        // 현재는 임시로 [1, 2, 3] 형식의 데이터로 가정\r\n        return [Math.random() * 10, Math.random() * 10, Math.random() * 10];\r\n    };\r\n\r\n    // 클러스터링 요청을 백엔드로 전송하는 함수\r\n    const handleClusterImages = async () => {\r\n        try {\r\n            const response = await axios.post('http://localhost:8080/api/kmeans', imageData, {\r\n                params: { numClusters },\r\n            });\r\n            setResult(response.data);  // 클러스터링 결과 설정\r\n        } catch (error) {\r\n            console.error(\"Error clustering images:\", error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <h1>Image Clustering</h1>\r\n            <div>\r\n                <input\r\n                    type=\"file\"\r\n                    multiple\r\n                    onChange={handleFileChange}\r\n                />\r\n            </div>\r\n            <div>\r\n                <label>Number of Clusters: </label>\r\n                <input\r\n                    type=\"number\"\r\n                    value={numClusters}\r\n                    onChange={(e) => setNumClusters(Number(e.target.value))}\r\n                />\r\n            </div>\r\n            <button onClick={handleClusterImages}>Cluster Images</button>\r\n\r\n            <div>\r\n                <h2>Cluster Results:</h2>\r\n                <pre>{JSON.stringify(result, null, 2)}</pre>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default KMeans;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}